package main

import (
	"fmt"
	"golang.org/x/crypto/ssh"
)

func main() {
	config := &ssh.ClientConfig{
		User: "your_username",
		Auth: []ssh.AuthMethod{
			ssh.Password("your_password"),
			// You can add other authentication methods here, like public key authentication.
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(), // Insecure, use proper validation in production.
	}

	connection, err := ssh.Dial("tcp", "10.133.35.143:22", config)
	if err != nil {
		fmt.Println("Failed to establish SSH connection:", err)
		return
	}
	defer connection.Close()

	session, err := connection.NewSession()
	if err != nil {
		fmt.Println("Failed to create session:", err)
		return
	}
	defer session.Close()

	output, err := session.CombinedOutput("your_command_here")
	if err != nil {
		fmt.Println("Failed to run command:", err)
		return
	}

	fmt.Println("Command Output:")
	fmt.Println(string(output))
}
